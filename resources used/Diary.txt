Idea:

        Day 1:

        Defining folder structure, test terraform init with AWS and document what is DNS resolver:

        --- Documentation used:

                easy guide from AWS docs: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-getting-started.html

                tech talk description for dns resolver: https://www.youtube.com/watch?v=Rka2rs0J9BI


Planning:

        Day 2: 

        Not much time, tomorrow I have a presentation with my rundeck project so I priorized this first.

                Created vpc in Ireland with Terraform and played a bit with EC2 Instances (So damn slow booting comparated with GCP!)
                The concepts of vpc and networking are different, in GCP they use the Metadata Service (in GCP you can't touch DNS in the instance or you loose ssh connectivity!)

                So Far I reproduced the environment to automate with Terraform and made a 'shoplist' of things I have to not forget when writting the terraform template.

        Day 3:

        The presentation went great! Many people claped! (it's a big advance from manual deployments to automate them in 1 single click!)

                Today I played a bit with terraform, I made basic instance / 2 vpc / resolver and security rule (Now I'm getting to know AWS differences, it's funny though)

                So I lack how to connect the instance with the resolver IP, not familiar with aws, I need this step and refine the code to make it look more cool (and scalable/mainteinable as well)
        day 4:

                rest :P
        Day 5:
                playing with terraform and understanding AWS route 53 resolver to answer question 4: https://www.youtube.com/watch?v=D1n5kDTWidQ
                ok so I made the technical test and need to resolve/improve the rest of questions (1 and 4). There are many differences between AWS and GCP which delayed me but I think I have almost all most important. The test is not much hard, I'm spending too much time on it.
        Day 6: 

                retracted terraform keys in provider.tf and exploring different options to store the keys (definitly this was a workaround, it's my test account not my corp one) so exploring things like vault https://medium.com/@mitesh_shamra/terraform-security-using-vault-ed0fa1db4e09
                or env variables (perhaps easier) but I tested in windows and not much progress...

                anyway, I Dockerized a basic dnsmasq conf in alpine, this is perhaps the most scalable way and HA using a regional cluster (but it already has kube-dns so it's pretty useless as it eats more resources from the cluster, also price is way different than in GCP, https://aws.amazon.com/eks/pricing/?nc1=h_ls vs https://cloud.google.com/products/calculator/#tab=container)
                If I want to scale and edit, I need to dockerize it again, after editing the config files (or if I go to k8s I can use configmaps and just restart the pods). the config should work for a vm as it is the same, so I can reuse it if this step is not successful. Also k8s is perhaps safer than vms (different network and exposing only the port 53, more isolated)

                I did not worked today with terraform, it's stable for now so let's don't touch it much.
        Day 7:

                Played a bit to debug Kubernetes using an external load balancer to see if from home i can connect to the dnsmasq serice, no luck.
                The container itself is able to resolve 8.8.4.4 [1] (the dnameservers I configured in the resolv.dnsmasq file, despite pod configuration pods to localhost)
                This option is crazy but a dns service is number1 service to be containerized, like mq services or dhcp or rest. This is why I like more than the option of having VMs.
                Also is more maintainable, versionable and secure (we can set a proxy rule to don't accept traffic and with kubernetes rules to restart automaticly if it gets stuck)
                
                 Was it failing as I can't configure a loadbalancer (which is based in node port service) UDP and TCP at the same time? https://github.com/kubernetes/kubernetes/issues/20092
                
                 [1] see nslookup.txt in the folder dnsmasq 

                I'm not feeling realy good so I I will rest today.

                soo I rested a couple of hours and feel way better after a walk.

                I'm playing with packer to provison instances to aws, never used before so let's see how it goes (im using dev branch)
                Perhaps with ingress I can solve the tcp/udp issue with node ports in kubernetes, ingress is a more advanced loadbalancer.
                https://kubernetes.io/docs/concepts/services-networking/ingress/#single-service-ingress

        Day 8:

                OK so Packer is more easy than I imagined. I made a simple script to install the tools I need to debug while generating the image to understand how is its behavior. I realise that despite I remove /etc/resolv.conf to create my, it's rewrited again (there's some agent in the vm?).
                Also with the same settings than in the Docker container dnsmasq is failing to restart:

                amazon-ebs: Aug 28 19:04:13 ip-172-31-9-200 dnsmasq[6797]: dnsmasq: bad option at line 1 of /etc/dnsmasq.d/resolv.dnsmasq
                amazon-ebs: Aug 28 19:04:13 ip-172-31-9-200 dnsmasq[6797]: bad option at line 1 of /etc/dnsmasq.d/resolv.dnsmasq
                amazon-ebs: Aug 28 19:04:13 ip-172-31-9-200 dnsmasq[6797]: FAILED to start up

                I will think with another strategy, perhaps is not working well like this.
                It would be great to catch this AMI generated and include it as env var in the --to do dnsmasq.tf to automate this step 
                or use a jenkins to build a pipeline for this process in stages like 1) scm from git, 2 generate image with packer 3) deploy infrastructure in terraform 4) script to ssh in the machine to validate the dns, if dns resolution after x times == 0 exit 0, else 1 = fail.

