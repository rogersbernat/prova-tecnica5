PS C:\git\prova-tecnica5\kubernetes> kubectl apply -f nginx.yaml -v 8 
I0821 17:03:39.937536    8676 loader.go:359] Config loaded from file C:\Users\roger/.kube/config
I0821 17:03:39.941533    8676 round_trippers.go:416] GET https://kubernetes.docker.internal:6443/openapi/v2?timeout=32s
I0821 17:03:39.960532    8676 round_trippers.go:423] Request Headers:
I0821 17:03:39.960532    8676 round_trippers.go:426]     Accept: application/com.github.proto-openapi.spec.v2@v1.0+protobuf
I0821 17:03:39.960532    8676 round_trippers.go:426]     User-Agent: kubectl.exe/v1.14.3 (windows/amd64) kubernetes/5e53fd6
I0821 17:03:39.984532    8676 round_trippers.go:441] Response Status: 200 OK in 22 milliseconds
I0821 17:03:39.993533    8676 round_trippers.go:444] Response Headers:
I0821 17:03:39.993533    8676 round_trippers.go:447]     Vary: Accept-Encoding
I0821 17:03:39.993533    8676 round_trippers.go:447]     Vary: Accept
I0821 17:03:39.993533    8676 round_trippers.go:447]     Date: Wed, 21 Aug 2019 15:03:39 GMT
I0821 17:03:39.994534    8676 round_trippers.go:447]     Accept-Ranges: bytes
I0821 17:03:39.994534    8676 round_trippers.go:447]     X-Varied-Accept: application/com.github.proto-openapi.spec.v2@v1.0+protobuf
I0821 17:03:39.995532    8676 round_trippers.go:447]     Content-Type: application/octet-stream
I0821 17:03:39.995532    8676 round_trippers.go:447]     Etag: "425AAB97E29DFEC7EEFF028FB849A0203328DB878F4554E173696EA852C2B29DB1FBD7A1E3D5CDF119A0EA00F5130075E9ADE6A36C9CAE7EACA0AA13DA71427C"
I0821 17:03:39.995532    8676 round_trippers.go:447]     Last-Modified: Tue, 20 Aug 2019 17:32:05 GMT
I0821 17:03:40.089559    8676 request.go:940] Response Body:
00000000  0a 03 32 2e 30 12 15 0a  0a 4b 75 62 65 72 6e 65  |..2.0....Kuberne|
00000010  74 65 73 12 07 76 31 2e  31 34 2e 33 42 b8 a8 95  |tes..v1.14.3B...|
00000020  01 12 aa 2d 0a 3c 2f 61  70 69 2f 76 31 2f 6e 61  |...-.</api/v1/na|
00000030  6d 65 73 70 61 63 65 73  2f 7b 6e 61 6d 65 73 70  |mespaces/{namesp|
00000040  61 63 65 7d 2f 72 65 70  6c 69 63 61 74 69 6f 6e  |ace}/replication|
00000050  63 6f 6e 74 72 6f 6c 6c  65 72 73 2f 7b 6e 61 6d  |controllers/{nam|
00000060  65 7d 12 e9 2c 12 e3 05  0a 07 63 6f 72 65 5f 76  |e}..,.....core_v|
00000070  31 1a 28 72 65 61 64 20  74 68 65 20 73 70 65 63  |1.(read the spec|
00000080  69 66 69 65 64 20 52 65  70 6c 69 63 61 74 69 6f  |ified Replicatio|
00000090  6e 43 6f 6e 74 72 6f 6c  6c 65 72 2a 29 72 65 61  |nController*)rea|
000000a0  64 43 6f 72 65 56 31 4e  61 6d 65 73 70 61 63 65  |dCoreV1Namespace|
000000b0  64 52 65 70 6c 69 63 61  74 69 6f 6e 43 6f 6e 74  |dReplicationCont|
000000c0  72 6f 6c 6c 65 72 32 10  61 70 70 6c 69 63 61 74  |roller2.applica [truncated 15565761 chars]
I0821 17:03:40.136532    8676 round_trippers.go:416] GET https://kubernetes.docker.internal:6443/apis/apps/v1/namespaces/default/deployments/nginx0-deployment
I0821 17:03:40.137532    8676 round_trippers.go:423] Request Headers:
I0821 17:03:40.137532    8676 round_trippers.go:426]     Accept: application/json
I0821 17:03:40.137532    8676 round_trippers.go:426]     User-Agent: kubectl.exe/v1.14.3 (windows/amd64) kubernetes/5e53fd6
I0821 17:03:40.139531    8676 round_trippers.go:441] Response Status: 404 Not Found in 1 milliseconds
I0821 17:03:40.140532    8676 round_trippers.go:444] Response Headers:
I0821 17:03:40.140532    8676 round_trippers.go:447]     Content-Type: application/json
I0821 17:03:40.140532    8676 round_trippers.go:447]     Content-Length: 236
I0821 17:03:40.141532    8676 round_trippers.go:447]     Date: Wed, 21 Aug 2019 15:03:40 GMT
I0821 17:03:40.141532    8676 request.go:942] Response Body: {"kind":"Status","apiVersion":"v1","metadata":{},"status":"Failure","message":"deployments.apps \"nginx0-deployment\" not found","reason":"NotFound","details":{"name":"nginx0-deployment","group":"apps","kind":"deployments"},"code":404}
I0821 17:03:40.142531    8676 request.go:942] Request Body: {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"nginx0-deployment\"},\"name\":\"nginx0-deployment\",\"namespace\":\"default\"},\"spec\":{\"replicas\":2,\"selector\":{\"matchLabels\":{\"app\":\"nginx0\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"nginx0\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/nginx:1.7.9\",\"name\":\"nginx\",\"ports\":[{\"containerPort\":80}]}]}}}}\n"},"labels":{"app":"nginx0-deployment"},"name":"nginx0-deployment","namespace":"default"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"nginx0"}},"template":{"metadata":{"labels":{"app":"nginx0"}},"spec":{"containers":[{"image":"k8s.gcr.io/nginx:1.7.9","name":"nginx","ports":[{"containerPort":80}]}]}}}}
I0821 17:03:40.142531    8676 round_trippers.go:416] POST https://kubernetes.docker.internal:6443/apis/apps/v1/namespaces/default/deployments
I0821 17:03:40.142531    8676 round_trippers.go:423] Request Headers:
I0821 17:03:40.143533    8676 round_trippers.go:426]     User-Agent: kubectl.exe/v1.14.3 (windows/amd64) kubernetes/5e53fd6
I0821 17:03:40.143533    8676 round_trippers.go:426]     Accept: application/json
I0821 17:03:40.143533    8676 round_trippers.go:426]     Content-Type: application/json
I0821 17:03:40.146532    8676 round_trippers.go:441] Response Status: 201 Created in 2 milliseconds
I0821 17:03:40.165943    8676 round_trippers.go:444] Response Headers:
I0821 17:03:40.165943    8676 round_trippers.go:447]     Content-Type: application/json
I0821 17:03:40.186533    8676 round_trippers.go:447]     Content-Length: 1569
I0821 17:03:40.223532    8676 round_trippers.go:447]     Date: Wed, 21 Aug 2019 15:03:40 GMT
I0821 17:03:40.224532    8676 request.go:942] Response Body: {"kind":"Deployment","apiVersion":"apps/v1","metadata":{"name":"nginx0-deployment","namespace":"default","selfLink":"/apis/apps/v1/namespaces/default/deployments/nginx0-deployment","uid":"dc109c76-c424-11e9-9b37-00155d040d01","resourceVersion":"24087","generation":1,"creationTimestamp":"2019-08-21T15:03:40Z","labels":{"app":"nginx0-deployment"},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"nginx0-deployment\"},\"name\":\"nginx0-deployment\",\"namespace\":\"default\"},\"spec\":{\"replicas\":2,\"selector\":{\"matchLabels\":{\"app\":\"nginx0\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"nginx0\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/nginx:1.7.9\",\"name\":\"nginx\",\"ports\":[{\"containerPort\":80}]}]}}}}\n"}},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"nginx0"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"nginx0"}},"spec":{"contain [truncated 545 chars]
deployment.apps/nginx0-deployment created


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

steps:

(Well not much detailed, this is very complex and long, hope you find the details you are seeking I could write a 10 pags doc with diagrams to explain all of this)

1 Authenticate with the local config file or env variable.
2 Encapsulate the POST call to the kubernetes api-server in the address provided in the configfile.
3 It will travel to the destination using the network and once reaching the api-server it will decapsulate and authenticate.
4 The kube api-server talks to the etcd and the deployment controller to ask if these object exist [1]. Reflector watches a specified resource and causes all changes to be reflected in the given store.
5 The deployment controller will talk with the replicaset with a POST to start the reconciliation.
6 Reconciliation: The Deployment controller will create/delete Replica set. The Replicaset will create/delete new pods. The Kube-scheduler will allocate these pods to the Nodes. The CRI (Container Runtime Interface) Will run these pods and the CNI [2] will give them network connectivity.
7 Kubelet will assure these pods are running, the scheduler will handle the allocation of the pods. After the reconciliation process is complete, the controllers receive a notification if the object has been created/updated/not changed.  
8 The controllers are observers of the state of the live objects. Controllers do not Reconcile events, rather they Reconcile the expected cluster state to the observed cluster state at the time Reconcile is run.
9 if we have a deployment, we will observe that a new replicaset is created, a rollout is triggered and when pods become ready they will replace the old one progressively.
10 we receive a message in the console, in this case <deployment-created>


[1] https://github.com/kubernetes/client-go/blob/f4e58ce6093cceb73a928dde55899917e4a5372d/tools/cache/reflector.go#L46
[2] https://github.com/kubernetes/kubernetes/blob/e8462b5b5dc2584fdcd18e6bcfe9f1e4d970a529/pkg/kubelet/dockershim/network/plugins.go#L48

Interesting sources regarding this topic:
https://borismattijssen.github.io/articles/kubernetes-informers-controllers-reflectors-stores
https://www.slideshare.net/harryzhang735/kubernetes-beyond-a-black-box-part-2
https://speakerdeck.com/thockin/kubernetes-what-is-reconciliation
